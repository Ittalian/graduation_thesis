<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>計算機実習 I - 第八回 - ポインタの基礎</title>
  <meta name="generator" content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1 style="text-align: center">計<acronym></acronym>算機実習 I</h1>

<h2 style="text-align: center">第八回 (2005年 6月 9日)</h2>

<h2 style="text-align: center">ポインタの基礎</h2>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2005 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1><strong></strong>先 (先) 週の演習について: 06B1</h1>

<p>getstring 関数の設計:</p>

<table border="1" style="font-size: 0.8em">
  <caption></caption>
  <tbody>
    <tr>
      <td rowspan="2">位置</td>
      <td rowspan="2">指数の値</td>
      <td colspan="3">入力文字</td>
    </tr>
    <tr>
      <td><code>EOF</code></td>
      <td><code>\n</code></td>
      <td>他</td>
    </tr>
    <tr>
      <td>最初</td>
      <td><code>i==0</code></td>
      <td><pre>b[0]='\0';
return end;</pre>
      </td>
      <td><pre>b[0]='\0';
return okay;</pre>
      </td>
      <td><pre>b[0]=c;
i++;</pre>
      </td>
    </tr>
    <tr>
      <td>場所あり</td>
      <td><code>i&lt;l-1</code></td>
      <td><pre>b[i]='\0';
return okay;</pre>
      </td>
      <td><pre>b[i]='\0';
return okay;</pre>
      </td>
      <td><pre>b[i]=c;
i++;</pre>
      </td>
    </tr>
    <tr>
      <td>ぎりぎり</td>
      <td><code>i==l-1</code></td>
      <td><pre>b[i]='\0';
return okay;</pre>
      </td>
      <td><pre>b[i]='\0';
return okay;</pre>
      </td>
      <td><pre>b[i]='\0';
i++;</pre>
      </td>
    </tr>
    <tr>
      <td>多すぎ</td>
      <td><code>i&gt;l-1</code></td>
      <td><pre>return over;</pre>
      </td>
      <td><pre>return over;</pre>
      </td>
      <td>なし</td>
    </tr>
  </tbody>
</table>

<h1>ポインタの用途</h1>
<ul>
  <li>低レベルのアドレス操作 (デバイス割り当てなど)</li>
  <li>動的メモリの管理</li>
  <li>配列の処理の効率化</li>
  <li>参照 (関数への渡しなど)</li>
  <li>間接 (indirection)</li>
</ul>

<h1>メモリの仕組み</h1>
<ul>
  <li>コンピュータでのメインメモリはすごく大きなバイトの配列</li>
  <li>メモリの番地はアドレスと言う</li>
  <li>ポインタはそのアドレスを使う</li>
</ul>

<h1>ポインタの演算 (1)</h1>
<ul>
  <li>アドレス演算子 <code>&amp;</code> (単項)</li>
  <li>間接演算子 <code>*</code> (単項)</li>
</ul>

<h1>ポインタの型</h1>
<ul>
  <li>ポインタは他の型 (整数、関数、構造体など) と別</li>
  <li>ポインタ型には指す型が含まれている
    <ul>
      <li>例: <code>int</code> のポインタ、<code>double</code>
        のポインタ、<code>char</code> のポインタ</li>
    </ul>
  </li>
  <li>それによって、ある程度の指し違いを防ぐことが出来る</li>
</ul>

<h1>ポインタの演算 (2)</h1>
<ul>
  <li>ポインタに整数を足引できる
    <ul>
      <li>足し算、引き算</li>
      <li>代入足し算、代入引き算</li>
      <li>インクリメント、デクリメント</li>
    </ul>
  </li>
  <li>整数 1
    でポインタはポインタが指す型のサイズ一個分ずらされる</li>
</ul>

<h1>配列とポインタ</h1>
<ul>
  <li>配列は、C の場合最初の位置しか記憶されない</li>
  <li>配列には同じ型の物が順番に並んでいる</li>
  <li>配列とポインタは非常に似ている</li>
</ul>

<p>実際、C の場合には配列とポインタは殆ど同じ</p>

<h1>ポインタの方程式</h1>

<p><code>&amp;*</code><var>p</var> ≡ <var>p</var></p>

<p><code>*&amp;</code><var>v</var> ≡ <var>v</var></p>

<p><code>*(</code><var>p</var><code>+</code><var>i</var><code>)</code> ≡
<var>p</var><code>[</code><var>i</var><code>]</code> ≡
<var>i</var><code>[</code><var>p</var><code>]</code></p>

<p> (<var>p</var> はポインタか配列かは問わない)</p>

<h1>引数の参照渡し</h1>
<ul>
  <li>目的:
    <ul>
      <li>関数に値を渡すのではなく、</li>
      <li>変数への参照を渡すことによって</li>
      <li>変数そのものを関数から変更できるようにする</li>
    </ul>
  </li>
  <li>技法:
    <ul>
      <li>引数をポインタとして定義</li>
      <li>関数呼び出し時にはアドレス演算子を使う</li>
      <li>関数の中には常に間接演算子とともに使う</li>
    </ul>
  </li>
  <li>問題点:
    <ul>
      <li>自動ではないので注意 (特に <code>scanf</code>
        などコンパイラが型をチェックできない場合)</li>
    </ul>
  </li>
</ul>

<h1>参照渡しの定石 (配列以外)</h1>
<ul>
  <li>関数側:
    <pre>void function (int *p) {
    if (*p &lt; 10)
        *p += 3;
}</pre>
  </li>
  <li>呼び出し側:
    <pre>int i = 5;
function (&amp;i);</pre>
  </li>
</ul>

<h1>参照渡しの (配列)</h1>
<ul>
  <li>配列は自動的に参照渡しされる</li>
  <li>関数の中では配列とポインタの差が全くなくなる<br />
    (引数定義では <code>int *a;</code> と <code>int a[];</code>
    は全く同じ)</li>
  <li>配列の長さが分からないので別に渡すのが多い</li>
</ul>

<h1>今週の演習</h1>
<ul>
  <li>08A1 からやること</li>
  <li>08B1 まで出来たら一回見せてください</li>
  <li>08B2, 08C1 等:
    「関数を作成」の問題ではテストしやすいような main
    関数も作る</li>
  <li>08B3 まで出来たらもう一回見せてください</li>
  <li>08C2 は今日はやらない</li>
</ul>

<h1>次回の準備</h1>
<ul>
  <li>C: ドライブに作ったプログラムを忘れずに Z:
    ドライブに移す</li>
  <li>今日の復習</li>
  <li>新訂新 C 言語入門の第 8 章 (ポインタ、pp. 203-228)
    をもう一回良く読む。</li>
</ul>
</body>
</html>
