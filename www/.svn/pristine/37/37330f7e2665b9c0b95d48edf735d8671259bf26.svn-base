<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>プログラミング基礎 I:
  日本語の文字と文書の処理</title>
  <meta name="generator" content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1 style="text-align: center">プログラミング基礎 I</h1>

<h2 style="text-align: center">第九回 (2005年 6月 13日):
日本語の文字と文書の処理</h2>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2005 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>先週の演習・宿題</h1>
<ul>
  <li>ローマ字表記を「ワープロ式」や訓令式からヘボン式へ変換するプログラムを作る</li>
  <li>他に正規表現を使うプログラムを作る</li>
</ul>

<h1>ヘボン式ローマ字表記</h1>

<p>ヘボン式の主な特徴</p>
<ul>
  <li>し: shi</li>
  <li>しゃ、しょ、しゅ: sha, sho, shu</li>
  <li>ふ: fu</li>
  <li>じ、じゃ、じょ、じゅ: ji, ja, jo, ju</li>
  <li>つ、づ: tsu, zu</li>
  <li>ち、ちゃ、ちょ、ちゅ: chi, cha, cho, chu</li>
  <li>ぢ、ぢゃ、ぢょ、ぢゅ: ji, ja, jo, ju</li>
</ul>

<h1>コンピュータでの文字の扱い方</h1>
<ul>
  <li>文字をコンピュータ内に表すには数字が使われる</li>
  <li>ローマ字など英語に必要な基本的な文字は (IBM
    の大型計算機以外)
    どのコンピュータでも同じ番号が使われる</li>
  <li>番号の付け方は「符号化」と言って、ローマ字の一般的な符号化は
    (US-)ASCII という</li>
  <li>文字の数が少ないので、一文字ごとにコンピュータの一番小さいメモリの単位
    (バイト) 一つで足りる</li>
</ul>

<h1>日本語の文字の扱い方</h1>
<ul>
  <li>文字の数が多いので一バイトでは足りない</li>
  <li>従来に日本語には三つの符号化の方法が使われている:
    <ul>
      <li>「JIS」(電子メール、正式には iso-2022-jp)</li>
      <li>「SJIS」(PC, Mac、正式には Shift_jis)</li>
      <li>「EUC」(Unix 系システム、正式には euc-jp)</li>
    </ul>
  </li>
  <li>処理が複雑</li>
  <li>国ごとの符号化には限界がある</li>
</ul>

<h1>ユニコードとは</h1>
<ul>
  <li>世界の文字全てを同時に扱える</li>
  <li>企業団体である Unicode Consortium と ISO/IEC (国際標準)
    が同時開発</li>
  <li>勿論日本語に必要な文字 (漢字、かななど)
    も含まれている</li>
  <li>従来の符号化の経験を踏まえて、処理が簡単</li>
  <li>用途によって二つの符号化: UTF-8 と UTF-16</li>
</ul>

<h1>Perl と世界の文字</h1>
<ul>
  <li>元々は英語しか処理できなかった</li>
  <li>日本語専用のバージョンも存在した (jperl)</li>
  <li>最近のバージョン (5.6系と5.8系)
    ではユニコードの符号化である UTF-8 が導入</li>
  <li>まだまだ不完全な面がある</li>
</ul>

<h1>UTF-8 のファイルの作り方と読み方</h1>

<p>作り方 (プログラムファイル、入力のファイル):</p>
<ul>
  <li>notepad2 を開く(既にあるファイルを開けてもよい)</li>
  <li>忘れずに「ファイル」→「encoding」→「UTF-8」を設定する</li>
  <li>ファイルに日本語等を入力する</li>
  <li>ファイルを保存する</li>
</ul>

<p>読み方 (出力のファイル):</p>
<ul>
  <li>ファイルを notepad2 で開いて読む</li>
</ul>

<h1>Perl で UTF-8 を使う</h1>

<p>Perl のプログラムの頭に次のことを書く:</p>

<p>Perl 5.6.x (教室など) の場合:</p>

<p><code>use utf8;</code></p>

<p>Perl 5.8.x の場合:</p>
<pre>use utf8;
binmode(STDIN, ":utf8");
binmode(STDOUT, ":utf8");
use open ':utf8';</pre>

<h1>演習</h1>
<ul>
  <li>今までのプログラムを英語から日本語に変換する</li>
  <li>先週の単語のリストをローマ字だけではなくて、かなも追加する</li>
</ul>
</body>
</html>
