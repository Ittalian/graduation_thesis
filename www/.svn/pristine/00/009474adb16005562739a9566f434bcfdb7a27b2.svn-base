<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <title>計算機実習 I - 第九回 - ポインタの応用:
  参照、間接、関数</title>
  <meta name="generator" content="amaya 9.5, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1 style="text-align: center">計<acronym></acronym>算機実習 I</h1>

<h2 style="text-align: center">第九回 (2005年 6月 15日)</h2>

<h2 style="text-align: center">ポインタの応用:
参照、間接、関数</h2>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2006 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>目次</h1>
<ul>
  <li>これからの予定</li>
  <li>先週のまとめ</li>
  <li>参照渡し</li>
  <li>間接</li>
  <li>引数としての関数</li>
</ul>

<h1>これからの予定</h1>
<ul>
  <li>今日: 先週と同様18:10からチェック</li>
  <li>来週: 総合復習テスト (紙、30分)、ファイル操作</li>
  <li>再来週から: 総合問題、レポート</li>
</ul>

<h1>ポインタの用途</h1>
<ul>
  <li>低レベルのアドレス操作 (デバイス割り当てなど)</li>
  <li>動的メモリの管理</li>
  <li>配列の処理の効率化</li>
  <li>参照 (関数への渡しなど)</li>
  <li>間接 (indirection)</li>
</ul>

<h1>先週のまとめ</h1>
<ul>
  <li>変数の種類によってスタック、ヒープ等に場所が取られる</li>
  <li>配列の指数計算はポインタ演算 (足し算など)
    に変換できる</li>
  <li>動的メモリは malloc で用意し、realloc
    で大きさを調整し、free で返す</li>
  <li>動的メモリを使うとき「定石」を使って、返す責任者を決めるのは大切</li>
</ul>

<h1>引数の値渡しと参照渡しのイメージ</h1>

<p>値渡し (passing by value):</p>
<ol>
  <li>メモ書き一枚に値を書いて、捨ててもいい様に渡す</li>
  <li>やって欲しい仕事を注文書で渡す</li>
</ol>

<p>参照渡し (passing by reference):</p>
<ol>
  <li>袋とかかばんを用意して、渡して、返してもらう</li>
  <li>仕事をやって欲しい場所 (住所) を渡す</li>
</ol>

<h1>引数の参照渡し</h1>
<ul>
  <li>目的:
    <ul>
      <li>関数に値を渡すのではなく、<br />
        変数への参照を渡すことによって<br />
        変数そのものを関数から変更できるようにする</li>
    </ul>
  </li>
  <li>技法:
    <ul>
      <li>引数をポインタとして定義</li>
      <li>関数呼び出し時にはアドレス演算子を使う</li>
      <li>関数の中には常に間接演算子とともに使う</li>
    </ul>
  </li>
  <li>問題点:
    <ul>
      <li>自動ではないので注意 (特に <code>scanf</code>
        などコンパイラが型をチェックできない場合)</li>
    </ul>
  </li>
</ul>

<h1>参照渡しの定石 (配列以外)</h1>
<ul>
  <li>関数側: 引数をポインタとして定義と使用<br />
    例: <code>p</code>
    が指しているものが10より小さかったら3を足す
    <pre>void function (int *p) {
    if (*p &lt; 10)
        *p += 3;
}</pre>
  </li>
  <li>呼び出し側: アドレスで渡す
    <pre>int i = 5;
function (&amp;i);</pre>
  </li>
</ul>

<h1>参照渡しの (配列)</h1>
<ul>
  <li>配列はポインタと同等なものなので自動的に参照渡しされる</li>
  <li>関数の中では配列とポインタの差が全くなくなる<br />
    (引数定義では <code>int *a;</code> と <code>int a[];</code>
    は全く同じ)</li>
  <li>配列の長さが分からないので注意が必要:
    <ul>
      <li>配列の終わりの印を決める</li>
      <li>配列の長さを別の引数として渡す</li>
    </ul>
  </li>
</ul>

<h1>間接 (indirection)</h1>

<p>名言:
「情報テクノロジーの問題の全ては間接のレベルを一つ増やせば解決できる」</p>

<p>間接の例:</p>
<ul>
  <li>IP アドレスの代わりにドメイン名</li>
  <li>学生本人の代わりに学生番号</li>
  <li>データベースのインデックス</li>
  <li>Google, Yahoo みたいなサーチエンジン</li>
</ul>

<p>C の場合には間接にポインタを使う</p>

<h1>間接の応用例</h1>

<p>順番を入れ替える時に、実際のデータを入れ代わると:</p>
<ul>
  <li>沢山のデータを移動しないといけなくて大変</li>
  <li>データの場所が変わって、他の関数などが困ることがある</li>
  <li>同時に一つの順番にしかできない</li>
</ul>

<p>間接を使えば全ての問題が解決できる</p>

<h1>関数に関数を渡す</h1>

<p>関数 (のポインタ)
も関数に引数として渡すことができる</p>

<p>典型例:
あるパターンに仕事して欲しいが、具体的な仕事がまだ決まってない</p>

<p>応用例: 相模原の全ての講堂にある仕事をして欲しい</p>

<p>解決:</p>
<ul>
  <li>関数「講堂たどり」を作る</li>
  <li>「講堂たどり」に実際の仕事をやってくれる関数を渡す</li>
  <li>「講堂たどり」が各講堂で実際の仕事の関数を呼ぶ</li>
</ul>

<h1>関数に関数を渡す: 応用例</h1>

<p>何かのデータを整列するとき:</p>
<ul>
  <li>整列の基準が色々ある</li>
  <li>整列のやり方も色々あって複雑</li>
  <li>二つは全く関係がない</li>
  <li>関数一つで整列しようとすると沢山の複雑な関数が必要</li>
  <li>二つの項目を比較する比較関数を再列関数に渡すと:
    <ul>
      <li>整列関数は一つで良い (ライブラリで用意可能)</li>
      <li>比較関数が比較的に簡単</li>
    </ul>
  </li>
</ul>

<h1><code>void *</code> と <code>NULL</code></h1>
<ul>
  <li>ポインタの型が無関係・不明なときには <code>void
    *</code> を使う</li>
  <li>普通のポインタ型から又は普通のポインタ型への変換が可能</li>
  <li>ポインタがどこにも指してないときは <code>NULL</code>
    (0) を使う</li>
  <li>NULL
    のポインタを参照するのはエラーになるので必要に応じて使う前にチェック</li>
</ul>

<h1>次回の準備</h1>
<ul>
  <li>残りの演習問題を宿題として完成</li>
  <li>今日の復習</li>
  <li>総合復習テストの準備</li>
  <li>参考書の第 11 章 (ポインタ、pp. 281-311)
    をもう一回良く読む。</li>
  <li>参考書の第 12 章 (ファイル操作、pp. 313-345)
  を読む。</li>
</ul>
</body>
</html>
