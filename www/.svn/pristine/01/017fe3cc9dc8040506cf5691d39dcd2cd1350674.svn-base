<rdf:RDF
    xmlns:dcterms="http://purl.org/dc/terms/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:dc="http://purl.org/dc/elements/1.1/" >
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-1">
    <dc:description>Java でのクラスの定義の仕方</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-1-1">
    <dc:description>Java のクラスは &lt;span class="keyword"&gt;class&lt;/span&gt; を予約語を使って定義する。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-1-2">
    <dc:description>クラス名はその予約語の後に続ける。最初の文字は大文字にする。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-1-3">
    <dc:description>例：Policy、Client、House など</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-1-4">
    <dc:description>クラスのアクセスレベルは &lt;span class="keyword"&gt;class&lt;/span&gt; の前に指定する。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-2">
    <dc:description>.java ファイル</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-2-1">
    <dc:description>.java ファイル内に Java クラスが含まれる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-2-2">
    <dc:description>一つのファイルには一つの &lt;span class="keyword"&gt;public&lt;/span&gt; クラスを含める。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-2-3">
    <dc:description>一つのファイルは一つ以上の &lt;span class="keyword"&gt;non-public&lt;/span&gt; クラスを含める。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-2-4">
    <dc:description>ファイル名はファイル中に含まれるクラス名と同じ</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3">
    <dc:description>フィールド</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-1">
    <dc:description>フィールドとは</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-2">
    <dc:description>フィールドを通してオブジェクトの状態が実装される。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-3">
    <dc:description>フィールドはクラスレベルで定義される。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-4">
    <dc:description>同じクラス名の全てのインスタンスは同じフィールドを持つ。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-5">
    <dc:description>フィールド値はインスタンス毎に異なることもできる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-6">
    <dc:description>フィールドはインスタンス変数ともいう。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-7">
    <dc:description>フィールドの定義</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-8">
    <dc:description>フィールドの定義はアクセス修飾子、フィールドの型、フィールド名からなる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-9">
    <dc:description>フィールドの初期化</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-10">
    <dc:description>あまり使われないがフィールドを宣言するときに行う。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-3-11">
    <dc:description>たいていフィールドの初期化のためにコンストラクタが使われる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4">
    <dc:description>メソッド</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-1">
    <dc:description>メソッドとは</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-2">
    <dc:description>メソッドはオブジェクトの振る舞いを表す。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-3">
    <dc:description>同じクラスのインスタンスは同じメソッド群を持ち、かつ同じメッセージに対して一意に解釈する。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-4">
    <dc:description>メッセージがオブジェクトに送られて、メッセージに対応するメソッドが実行される。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-5">
    <dc:description>メソッドはメッセージの実装を表す。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-6">
    <dc:description>メソッドとカプセル化</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-7">
    <dc:description>private フィールドにアクセスするのに、ゲッタとセッタが使われる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-8">
    <dc:description>ゲッタはフィールド値を返し、セッタは渡されたパラメータにフィールド値を設定する。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-9">
    <dc:description>ゲッタとセッタはカプセル化を強化する。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-10">
    <dc:description>メソッドはメッセージに対するオブジェクトの反応を表す。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-11">
    <dc:description>メソッドの定義</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-4-12">
    <dc:description>メソッドはフィールド同様にアクセス修飾子、戻り値の型、メソッド名、型と名前の付いたパラメータで定義される。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-5">
    <dc:description>コンストラクタ</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-5-1">
    <dc:description>コンストラクタとは</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-5-2">
    <dc:description>クラスのインスタンスを作るための特別なメソッドのことで、アクセス識別子があり、クラスと同じ名前である。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-5-3">
    <dc:description>新しいインスタンスを操作する。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-5-4">
    <dc:description>コンストラクタの使い方</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-6">
    <dc:description>Policy クラスの実装</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-7">
    <dc:description>メッセージとオブジェクト</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-7-1">
    <dc:description>オブジェクトは他のオブジェクトにメッセージを送る。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-8">
    <dc:description>Expressions</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-8-1">
    <dc:description>文は基本的な Java の式である。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-8-2">
    <dc:description>セミコロン（;）は文の終わりを表す。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-9">
    <dc:description>リテラル</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-9-1">
    <dc:description>変わらないハードコードされた値を表す。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-9-2">
    <dc:description>典型例は string リテラルである。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-10">
    <dc:description>コメント</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-10-1">
    <dc:description>一行コメントは // で始まり、行の終わりまで。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-10-2">
    <dc:description>複数行コメントは /* で始まり */ で終わる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-10-3">
    <dc:description>Javadoc コメントは /** で始まり */ で終わる。ドキュメントを作るための Javadoc プログラムによって使われる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-10-4">
    <dc:description>コメント例</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-11">
    <dc:description>Java と型</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-11-1">
    <dc:description>Java には2つの型がある。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-11-2">
    <dc:description>プリミティブ型</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-11-3">
    <dc:description>参照型</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-11-4">
    <dc:description>Java は強く型付けされた言語</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-11-5">
    <dc:description>フィールド、変数、メソッドのパラメータ、戻り値は型を持っていなければならない。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-12">
    <dc:description>Java でのオブジェクト生成</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-12-1">
    <dc:description>Java ではコンストラクタを使用してオブジェクトが生成される。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-12-2">
    <dc:description>コンストラクタはクラスと同じ名前のメソッドである。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-12-3">
    <dc:description>フィールドの初期化のために引数があるものもある。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-12-4">
    <dc:description>コンストラクタが定義されていないなら、デフォルトのコンストラクタが使われる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-13">
    <dc:description>参照型と変数</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-14">
    <dc:description>オブジェクトの型変換</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-14-1">
    <dc:description>メッセージとサブタイプに送ることができる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-14-2">
    <dc:description>変数はスーパクラスの型として宣言される。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-14-3">
    <dc:description>宣言された変数の型は同じままである。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-14-4">
    <dc:description>変数 policy の例ではキャストした後も Policy 型のままである。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-15">
    <dc:description>割り当て</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-15-1">
    <dc:description>変数にオブジェクトを割り当てることで変数をオブジェクトに結びつける。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-16">
    <dc:description>同一のオブジェクト</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-16-1">
    <dc:description>2つのオブジェクトが同一かチェックするのにオペランド == が使われる。同じメモリ空間を占めていればそれらは同一である。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-16-2">
    <dc:description>オブジェクトを参照している変数は値で比較する。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-16-3">
    <dc:description>メモリのアドレスが同じならオブジェクトが同一である。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-16-4">
    <dc:description>クラスの同じインスタンスを参照していれば変数は同一である。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-17">
    <dc:description>同等のオブジェクト</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-17-1">
    <dc:description>equals() メソッドの実装で決められる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-17-2">
    <dc:description>同等の基準を証明するのにたいていはスーパクラスをオーバライディングする。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-18">
    <dc:description>null</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-18-1">
    <dc:description>参照がないならオブジェクトは自動的にガーベージコレクションされる。</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture3.html#lec3-18-2">
    <dc:description>オブジェクト型の変数が宣言された時は、値として null が割り当てられる。</dc:description>
  </rdf:Description>
</rdf:RDF>
