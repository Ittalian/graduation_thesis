<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <meta content="text/html; charset=UTF-8" />
  <title>第八回: yacc 系ツールの使い方</title>
  <meta name="generator" content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1 style="text-align: center;"><strong>言語理論とコン
パイラ</strong></h1>

<p style="text-align: center;"><strong>第八</strong><strong>回:</strong>
<a href="lecture8.html">yacc 系ツールの使い方</a></p>

<p style="text-align: center;">2005 年 6月 10日</p>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2005 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>先週の補助: 簡単な手作りコンパイラ</h1>

<p>プログラム: <a href="prog.simple/scanner.h">scanner.h</a>, <a
href="prog.simple/scanner.c">scanner.c</a>, <a
href="prog.simple/parser.c">parser.c</a></p>

<h1>下向き構文解析の問題点</h1>
<ul>
  <li>効率良い構文解析のためにはかなり限られた文法が必要</li>
  <li>例:<br />

    <pre>factor → functioncall | variable | arrayelement
functioncall → identifier '(' parameters ')'
variable → identifier
arrayelement → identifier '[' expression ']'</pre>
  </li>
  <li><code>factor</code>
    でどこの規則を選べば良いのか分からない</li>
</ul>

<h1>最左導出と最右導出</h1>

<h1>文法の種類の呼び方</h1>
<ul>
  <li>LL: 左から入力を読んで、最左導出</li>
  <li>LR: 左から入力を読んで、最右導出</li>
  <li>LL(1): LL で、一つトーケンを先読み</li>
  <li>LR(1): LR で、一つトーケンを先読み</li>
  <li>LALR: LR (1) の一種で、yacc など幅広く使われる</li>
</ul>

<h1>LALR 構文解析の原理</h1>

<p>スタックを使って読んだトーケンや途中の非終端記号を蓄積</p>

<p>オートマトンを使って出来るだけ簡単な操作で次のステップを決める</p>

<p>(LA)LR 構文解析の二つのオペレーション</p>
<ul>
  <li>shift:
    トーケンを一個読んで、そのトーケンをスタックにステートと一緒に詰める</li>
  <li>reduce:
    スタックの上部にあるトーケンや非終端記号を文法規則を使って一つの終端記号に変換する</li>
</ul>

<h1>bison とは</h1>
<ul>
  <li>yacc: yet another compiler compiler</li>
  <li>Unix の普及とともに広がった</li>
  <li>compiler compiler: コンパイラを作るコンパイラ</li>
  <li>yet another: もう一つ、できた当時に compiler compiler
    が流行りで、他に名前が浮かんで来なかった</li>
  <li>bison: yacc の gnu 版</li>
</ul>

<h1>flex と bison の資料</h1>
<ul>
  <li><a href="../../system/flex_bison/">インストール方法</a></li>
  <li>flex のマニュアル (日本語):<br />
    <a
    href="http://guppy.eng.kagawa-u.ac.jp/~kagawa/2000/SysProg/flex-2.5.4/flex_toc.html">http://guppy.eng.kagawa-u.ac.jp/~kagawa/2000/SysProg/flex-2.5.4/flex_toc.html</a></li>
  <li>bison のマニュアル (日本語):<br />
    <a
    href="http://guppy.eng.kagawa-u.ac.jp/~kagawa/2001/SysProg/bison-1.2.8/bison-ja_toc.html">http://guppy.eng.kagawa-u.ac.jp/~kagawa/2001/SysProg/bison-1.2.8/bison-ja_toc.html</a></li>
</ul>
</body>
</html>
