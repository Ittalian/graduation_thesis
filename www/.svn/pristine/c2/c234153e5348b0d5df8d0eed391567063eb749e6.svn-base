<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>計算機実習 I - 第十回 - 総合復習</title>
  <meta name="generator" content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1 style="text-align: center">計<acronym></acronym>算機実習 I</h1>

<h2 style="text-align: center">第十一回 (2005年 6月30日)</h2>

<h2
style="text-align: center">標準ライブラリーの使い方、ファイル入出力</h2>

<p style="text-align: center"><a
href="http://www.sw.it.aoyama.ac.jp/2005/Computer%20Practice%20I/lecture11.html"
style="margin-left: auto; margin-right: auto">http://www.sw.it.aoyama.ac.jp/2005/Computer%20Practice%20I/lecture11</a><a
href="http://www.sw.it.aoyama.ac.jp/2005/Computer%20Practice%20I/lecture10.html"
style="margin-left: auto; margin-right: auto">.html</a></p>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2005 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>課題について</h1>

<h1>プリプロセッサについて</h1>

<h1>標準ライブラリについて</h1>

<h1>ファイル入出力</h1>
<ul>
  <li>リダイレクトでファイル入出力ができたが、限界がある</li>
  <li>複数のファイル "から" 又は "へ" 読み書きしたい</li>
  <li>ファイル名をプログラムの中から指定したい</li>
</ul>

<h1>標準入力関数とファイルファイル入力関数</h1>

<table border="1">
  <tbody>
    <tr>
      <td>標準入力 (<code>stdin</code>)</td>
      <td>任意のファイル <code><var>f</var></code></td>
      <td>機能</td>
    </tr>
    <tr>
      <td>(不要)</td>
      <td><code>fopen(name,"r")</code></td>
      <td>ファイルを開く</td>
    </tr>
    <tr>
      <td><code>getchar()</code></td>
      <td><code>getc(f)</code> 又は <code>fgetc(f)</code></td>
      <td>一文字入力</td>
    </tr>
    <tr>
      <td><code><span
        style="text-decoration: line-through; color: #CA3539; background-color: #FFFFFF">gets(s)</span></code>
        <code>fgets(s,l,stdin)</code></td>
      <td><code>fgets(s,l,f)</code></td>
      <td>一行入力</td>
    </tr>
    <tr>
      <td><code>scanf(format,...)</code></td>
      <td><code>fscanf(f,format,...)</code></td>
      <td>書式つき入力</td>
    </tr>
  </tbody>
</table>

<h1>標準出力関数とファイル出力関数</h1>

<table border="1">
  <tbody>
    <tr>
      <td>標準出力 (<code>stdout</code>)</td>
      <td>任意のファイル <code>f</code></td>
      <td>機能</td>
    </tr>
    <tr>
      <td>(不要)</td>
      <td><code>fopen(name,"w")</code></td>
      <td>ファイルを開く</td>
    </tr>
    <tr>
      <td><code>putchar(c)</code></td>
      <td><code>putc(c,f)</code> 又は <code>fputc(c,f)</code></td>
      <td>一文字出力</td>
    </tr>
    <tr>
      <td><code>puts(s)</code></td>
      <td><code>fputs(s,f)</code></td>
      <td>一行出力</td>
    </tr>
    <tr>
      <td><code>printf(format,...)</code></td>
      <td><code>fprintf(f,format,...)</code></td>
      <td>書式つき出力</td>
    </tr>
  </tbody>
</table>

<h1>他に便利な関数</h1>
<ul>
  <li><code>fclose(f)</code>: ファイルを閉じる</li>
  <li><code>fflush(f)</code>:
    出力した文字をバッファから追い出す</li>
  <li><code>sprintf(s,format,...)</code>:
    文字列への書式付き「出力」</li>
  <li><code>sscanf(s,format,...)</code>:
    文字列からの書式付き「入力」</li>
</ul>

<h1>エラー出力 <code>stderr</code></h1>
<ul>
  <li>エラーメッセージを標準出力に出すには限界がある
    <ul>
      <li>出力をリダイレクトしたいが、エラーメッセージは画面でみたい</li>
    </ul>
  </li>
  <li><code>stdin</code>, <code>stdout</code> と同様に
    <code>stderr</code> ファイル が常に用意されている</li>
  <li>出力にはファイル出力の関数を使わないといけない</li>
  <li>応用例:<br />

    <pre>if (!(file=fopen("myfile.txt","w")) {
    fprintf (stderr, "Cannot open file myfile.txt for writing.\n");
    exit(1);
}</pre>
  </li>
</ul>

<h1>バイナリストリーム入出力</h1>
<ul>
  <li>データを文書としてではなくて、バイナリのまま入出力</li>
  <li><code>fopen</code> には <code>"rb"</code>, <code>"wb"</code>,
    <code>"r+b"</code> 等を使う (<code>b</code> は binary,
    <code>+</code> は変更)</li>
  <li>ファイル内の位置は <code>fseek</code> で変更できる</li>
  <li>書くには <code>fwrite</code>、読むには <code>fread</code>
    関数を使う</li>
</ul>

<h1><code>fseek</code> 関数</h1>
<ul>
  <li>現在の読む・書く位置を変更</li>
  <li>引数は三つ:
    <ul>
      <li><code>FILE*</code> のファイルポインタ</li>
      <li><code>long</code> のゲタ (バイト)</li>
      <li><code>int</code> の種類:
        <ul>
          <li><code>SEEK_SET</code>: ゲタはファイルの頭から</li>
          <li><code>SEEK_CUR</code>: ゲタは現在位置から
          (負も可)</li>
          <li><code>SEEK_END</code>: ゲタはファイルの末尾から
            (負も可)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>戻り値: 成功の場合に <code>0</code>、そうでない場合に
    <code>EOF</code></li>
</ul>

<h1><code>fread</code> と <code>fwrite</code> 関数</h1>
<ul>
  <li>引数は四つ:
    <ul>
      <li><code>void *</code>
        のプログラム内の書き出したい、読み込みたい場所</li>
      <li><code>size_t</code> (普通は <code>int</code>) の要素
        (レコード) 1個の大きさ (バイト)</li>
      <li><code>size_t</code> のレコードの数</li>
      <li><code>FILE*</code> のファイルポインタ</li>
    </ul>
  </li>
  <li>戻り値は成功したレコードの数</li>
  <li>読むときと書くときの間に必ず <code>fseek</code> や
    <code>flush</code> が必要</li>
</ul>

<h1>コマンドラインからの引数</h1>

<p>コマンドラインにコマンドそのものの後に
(入出力のリダイレクト以外)
に書かれたものは次の通りに <code>main</code>
関数に渡される:</p>
<ul>
  <li><code>main</code> 関数の定義:<br />
    <code>int main (int argc, char *argv[]) { ... }</code></li>
  <li><code>argc</code> はプログラム名を含めて引数
    (<strong>arg</strong>ument) の数 (<strong>c</strong>ount)</li>
  <li><code>argv</code> は文字列ポインタの配列</li>
  <li><code>argv[0]</code> はプログラム名 (へのポインタ)</li>
  <li><code>argv[i]</code> は (1 から数えて) i 個目の引数
    (へのポインタ)</li>
  <li><code>argv[argc]</code> は <code>NULL</code></li>
</ul>

<h1>演習について</h1>
<ul>
  <li>A1 から始まる</li>
  <li>A4 が終わったら一回チェック</li>
  <li>B3 が終わったら一回チェック</li>
  <li>終わったら他に残っている問題をやる</li>
</ul>

<h1>次回の準備</h1>
<ul>
  <li>C: ドライブに作ったプログラムを忘れずに Z:
    ドライブに移す</li>
  <li>今まで作ったプログラムを絶対なくさないこと</li>
  <li>必要に応じて復習</li>
</ul>
</body>
</html>
