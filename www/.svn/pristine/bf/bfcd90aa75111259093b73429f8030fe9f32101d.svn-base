<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>第六回: 文脈自由言語と構文解析</title>
  <meta name="generator"
 content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
 type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
 type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
 type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>
<body>
<h1 style="text-align: center;"><strong>言
語理論とコン
パイラ</strong></h1>
<p style="text-align: center;"><strong>第
六</strong><strong>回:</strong>
文脈自由言語と構文解析</p>
<p style="text-align: center;">2005
年 5月 27日</p>
<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
 src="../../stylesheets/aoyamalogo.jpg" /></a></p>
<p class="signature">© 2005
<a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>
<h1>先週の試験: 第四問</h1>
<p>次の表の左側の正規表現で定義されている言語に表の最上列の語が含ま
れている場合に○、含まれていない場合に×を書け。</p>
<table border="1">
  <tbody>
    <tr>
      <td></td>
      <td><code>abc</code></td>
      <td><code>ac</code></td>
      <td><code>abccc</code></td>
      <td><code>acbc</code></td>
      <td><code>abcbc</code></td>
      <td><code>cba</code></td>
    </tr>
    <tr>
      <td><code>a(b|c)</code></td>
      <td>×</td>
      <td>○</td>
      <td>×</td>
      <td>×</td>
      <td>×</td>
      <td>×</td>
    </tr>
    <tr>
      <td><code>a(bc)*</code></td>
      <td>○</td>
      <td>×</td>
      <td>×</td>
      <td>×</td>
      <td>○</td>
      <td>×</td>
    </tr>
    <tr>
      <td><code>abc*</code></td>
      <td>○</td>
      <td>×</td>
      <td>○</td>
      <td>×</td>
      <td>×</td>
      <td>×</td>
    </tr>
  </tbody>
</table>
<h1>正規表現の復習</h1>
<ul>
  <li>一般の文字は自分を表す</li>
  <li>横並びは続きを表す</li>
  <li>| は選択を表す</li>
  <li>* は 0 以上の繰り返しを表す</li>
  <li>() は組み合わせを明解にする</li>
  <li>優先順位は高い方から *, 横並び、|</li>
</ul>
<h1>正規表現の例</h1>
<ul>
  <li>efg: efg</li>
  <li>e*fg: fg, efg, eefg,
eeefg,...</li>
  <li>ef*g: eg, efg, effg, efffg,
effffg,...</li>
  <li>e(fg)*: e, efg, efgfg,
efgfgfg,...</li>
  <li>e|f|g: e, f, g</li>
  <li>ef|g: ef, g</li>
  <li>e(f|g): ef, eg</li>
  <li>e(f|g)*: e, ef, eg, eff,
efg, egf, egg, efff, effg,...</li>
  <li>e|(fg)*: e, fg, fgfg,
fgfgfg,...</li>
  <li>e|(f|g)*: e, f, g, ff, fg,
gf, gg</li>
</ul>
<h1>文法と正規表現の違い</h1>
<p>文法:</p>
<ul>
  <li>複数の規則</li>
  <li>非終端記号、左から右へ導出</li>
  <li>*, (), | は純粋な場合には使わない</li>
</ul>
<p>正規表現:</p>
<ul>
  <li>一つの規則だけ</li>
  <li>非終端記号なし、「右側」だけ</li>
  <li>*, (), | 以外も実用的な物にはもっと機能がある</li>
</ul>
<p>正規表現の (簡単な) 規則は文法の (複雑な)
規則一つに相当する</p>
<h1>コンパイラの段階</h1>
<p>字句解析 (lexical analysis)</p>
<p>構文解析 (parsing; syntax analysis)</p>
<p>意味解析 (semantic analysis)</p>
<p>最適化 (optimization)</p>
<p>コード生成 (code generation)</p>
<h1>形式言語の表</h1>
<table border="1">
  <tbody>
    <tr>
      <td>文法</td>
      <td>grammar</td>
      <td>Type</td>
      <td>言語</td>
      <td>オートマトン</td>
    </tr>
    <tr>
      <td>句構造文法</td>
      <td>phrase structure grammar
(psg)</td>
      <td>0</td>
      <td>句構造言語</td>
      <td>チューリング機械</td>
    </tr>
    <tr>
      <td>文脈依存文法</td>
      <td>context-sensitive
grammar (csg)</td>
      <td>1</td>
      <td>文脈依存言語</td>
      <td>線形拘束オートマトン</td>
    </tr>
    <tr>
      <td>文脈自由文法</td>
      <td>context-free grammar
(cfg)</td>
      <td>2</td>
      <td>文脈自由言語</td>
      <td>プッシュダウンオートマトン</td>
    </tr>
    <tr>
      <td>正規文法</td>
      <td>regular grammar (rg)</td>
      <td>3</td>
      <td>正規言語</td>
      <td>有限オートマトン</td>
    </tr>
  </tbody>
</table>
<h1>字句解析と構文解析</h1>
<table border="1">
  <tbody>
    <tr>
      <td></td>
      <td>字句解析</td>
      <td>構文解析</td>
    </tr>
    <tr>
      <td>解析対象</td>
      <td>定数、識別子、予約語、演算子など</td>
      <td>式、文、関数など</td>
    </tr>
    <tr>
      <td>要点</td>
      <td>速さ</td>
      <td>能力</td>
    </tr>
    <tr>
      <td>記述方法</td>
      <td>正規表現</td>
      <td>文脈自由文法</td>
    </tr>
    <tr>
      <td>(自動) 解析手段</td>
      <td>有限オートマトン</td>
      <td>プッシュダウンオートマトン</td>
    </tr>
  </tbody>
</table>
<h1>正規文法と文脈自由文法</h1>
<p>正規文法:</p>
<ul>
  <li>右線形文法か左線形文法</li>
  <li>訂正: A → aB は<strong>右</strong>線
形、A → Ba は<strong>左</strong>線
形</li>
</ul>
<p>文脈自由文法:</p>
<ul>
  <li>文法の導出規則の左側は全て非終端記号一つ</li>
  <li>例: A → aBb, B → aaB, S →
aBaAb 等</li>
  <li>｢自由」の意味: 依存しない、左右されない、関係ない</li>
  <li>プログラム言語の構文は周りが関係なくてその場で正しいかどう
か判断できる</li>
  <li>意味解析も含まれると文脈自由がなくなる</li>
</ul>
<h1>文脈自由文法の一例</h1>
<p>S → aSa | bSb | c</p>
<p>生成する言語: 真ん中に c が一個、周りに a と b が
0
以上対照的に自由な順番に並ぶ</p>
<p>生成する語の例: c, aca, bcb,
abaabcbaaba 等</p>
<p>こういう風な言語を受理するのはメモリがないため有限オートマトンで
は不可能</p>
<p>オートマトンの機能拡張が必要</p>
<p>オートマトンにプッシュダウンスタックをつけよう</p>
<h1>プッシュダウンスタック</h1>
<ul>
  <li>受理する言語の記号と別のプッシュダウン記号を記憶できる</li>
  <li>一番上の記号しか見えない</li>
  <li>一番下に特別な記号 (ボトムマーカ) がある</li>
</ul>
<p><img
 alt="A stack of trays at a cafeteria. Only the topmost tray is visible due to a built-in spring."
 src="traystack.JPG" height="50%" width="50%" /></p>
<h1>プッシュダウンオートマトン</h1>
<ul>
  <li>遷移は入力記号だけではなくて、スタックの上に見える記号にも
依存する</li>
  <li>遷移でのスタックについての動作:
一番上のスタック記号を取るか、スタックをそのまま残すか、スタックに記号を追加するのか</li>
  <li>読み込みはボトムマーカだけのスタックから始まる</li>
  <li>受理はボトムマーカだけのスタックで可能</li>
</ul>
<h1>プッシュダウンオートマトンの一例</h1>
<ul>
  <li>a, b, c は言語の記号</li>
  <li>スタックは左が上で想定されている</li>
  <li>A/BA はスタックの一番上が A の場合に BA
に変わる (つまり、B が上乗せ)</li>
</ul>
<p><img alt="三スライド前の文法に相当するプッシュダウンオートマトンの図" src="pushdown.png" /></p>
<h1>決定性と非決定性のプッシュダウンオートマトン</h1>
<ul>
  <li>S → aSa | bSb | c
の文法の場合には決定性プッシュダウンオートマトンで実現できました</li>
  <li>S → aSa | bSb | ε
の文法の場合には決定性プッシュダウンオートマトンで実現できません。なぜかというと語の真ん中の印がない。</li>
  <li>有限オートマトンと違って、決定性と非決定性のプッシュダウン
プッシュダウンの性能 (受理能力) が違う</li>
  <li>効率よく構文解析できるには可能な限り決定性のある文法が必要</li>
</ul>
<p></p>
</body>
</html>
