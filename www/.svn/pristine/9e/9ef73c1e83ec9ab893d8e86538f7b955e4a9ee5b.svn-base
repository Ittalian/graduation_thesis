<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <meta content="text/html; charset=UTF-8" />
  <title>第十一回: コード生成と最適化</title>
  <meta name="generator" content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1 style="text-align: center;"><strong>言語理論とコン
パイラ</strong></h1>

<p style="text-align: center;"><strong>第</strong><strong>十一回:
コード生成と最適化</strong></p>

<p style="text-align: center;"></p>

<p><a
href="http://www.sw.it.aoyama.ac.jp/2005/Language%20Theory%20and%20Compilers/lecture11.html">http://www.sw.it.aoyama.ac.jp/2005/Language%20Theory%20and%20Compilers/lecture11.html</a></p>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2005 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>今日の予定</h1>
<ul>
  <li>コード生成 (code generation)</li>
  <li>最適化 (optimization)</li>
  <li>学生アンケート</li>
</ul>

<h1>コンパイラの主な段階</h1>

<p>字句解析 (lexical analysis)</p>

<p>構文解析 (parsing; syntax analysis)</p>

<p>意味解析 (semantic analysis)</p>

<p>最適化 (optimization)</p>

<p>コード生成 (code generation)</p>

<h1>コード生成と最適化の関係</h1>
<ul>
  <li>構文木で最適化、そこからコード生成</li>
  <li>生成したコードを分析、最適化</li>
  <li>実際は両方の組み合わせが多い</li>
</ul>

<h1>コード生成の難しさ</h1>
<ul>
  <li>機械によって使える命令は大幅に違う</li>
</ul>

<h1>コード生成の手法</h1>
<ul>
  <li>構文木を辿りながらノードごとにコードを書き出す</li>
  <li>構文木の構造をコード生成用のパターンのに比べてコードを書き出す</li>
</ul>

<h1>機械の主な種類</h1>
<ul>
  <li>スタック・マシーン:<br />
    演算は全てスタックに行われて、バーチャルマシーンに多い</li>
  <li>RISC:<br />
    演算は全てレジスタ内に行われて、純粋のロードとストアしかない</li>
  <li>CISC:<br />
    命令の数が多くて複雑 (例: Intel Pentium)</li>
</ul>

<h1>スタック・マシーンの式のコード生成</h1>
<ul>
  <li>構文木を深さ優先に辿る</li>
  <li>葉を PUSH 命令に変更</li>
  <li>演算ノードをスタック上の演算命令に変更</li>
</ul>

<h1>if 文などのコード生成</h1>
<ul>
  <li>条件を条件付きジャンプ命令に変更</li>
  <li>条件付き命令は前の演算から残るフラグを使ったり、0
    との比較が多い</li>
  <li>条件が合わない場合にジャンプすることが多い</li>
  <li>例: <code>if (a&gt;b)</code> → <code>a-b; jumpLE0</code></li>
  <li>ジャンプの行き先がまだ分からない場合が多い</li>
</ul>

<h1>関数呼び出しのコード生成</h1>
<ul>
  <li>呼び出し側と関数側に特別なコードが必要</li>
  <li>機械・OS・言語特有の関数呼び出しスタックの構成を考慮する必要がある</li>
  <li>関数呼び出しスタックの内容 (関数フレーム):
    <ul>
      <li>戻り番地 (関数後どこに戻るか)</li>
      <li>引数、戻り値</li>
      <li>前の関数フレームのベースポインタ</li>
      <li>使われるレジスターの値を退避する一時変数</li>
      <li>ローカル変数</li>
    </ul>
  </li>
</ul>

<h1>最適化の目的</h1>
<ul>
  <li>プログラムの実行速度の向上</li>
  <li>コードの量の削減</li>
  <li>次のことを保つ:
    <ul>
      <li>プログラムの意味</li>
      <li>コンパイルの速度</li>
      <li>デバグのしやすさ</li>
    </ul>
  </li>
</ul>

<h1>最適化の手法</h1>
<ul>
  <li>制御フロー解析 (control flow analysis)
    <ul>
      <li>プログラムを順番だけで実行される部分
        (基本ブロック) に切り分ける</li>
      <li>基本ブロックをノードに制御フローのグラフを作る</li>
    </ul>
  </li>
  <li>データフロー解析 (data flow analysis)
    <ul>
      <li>制御フロー解析の結果、どこの変数の代入がどこの変数の使用に影響を及ぼせるかを分析<br
        />
      </li>
    </ul>
  </li>
</ul>

<h1>最適化の手段 (1)</h1>

<p>複数の手法を繰り返し組み合わせて少しづつ最適化</p>
<ul>
  <li>静式評価 (constant folding, 定数たたみこみ)</li>
  <li>定数伝播 (constant propagation)</li>
  <li>共通の式の繰り返しからの追い出し</li>
  <li>無用命令の削除 (dead code elimination)</li>
  <li>命令をループの外へ移動</li>
  <li>演算の変更 (例: <code>x*2</code> → <code>x+x</code>
    もしくは <code>x&lt;&lt;1</code>)</li>
</ul>

<h1>最適化の手段 (2)</h1>

<p>この最適化はコードの量を増やすが、速くする</p>
<ul>
  <li>関数呼び出しの展開</li>
  <li>繰り返しの展開
    <ul>
      <li>少定数の繰り返しの展開
        (コードが小さくなる可能性もある)</li>
      <li>一部展開
        (20回の繰り返しを4部展開して5回繰り返す)</li>
    </ul>
  </li>
</ul>

<h1>最適化の手段 (3)</h1>

<p>この手段は機械に強く依存する</p>
<ul>
  <li>命令の入れ替え
    (命令によってかかる時間が違う、大きさが違う)</li>
  <li>命令の順番変更 (LOAD
  の後すぐ使うのではないなど)</li>
</ul>
</body>
</html>
