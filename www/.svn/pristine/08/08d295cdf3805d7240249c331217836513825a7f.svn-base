<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>言語理論とコンパイラ: 第三回</title>
  <meta name="generator" content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
    </style>
</head>

<body>
<h1
style="text-align: center"><strong>言語理論とコンパイラ</strong></h1>

<p style="text-align: center"><strong>第三</strong><strong>回:</strong>
正規表現と有限オートマトン</p>

<p style="text-align: center">2005年 5月 6日</p>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2005 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>宿題 (提出不要)</h1>
<ul>
  <li>XML について調べる</li>
  <li>特に次のことを調べる:
    <ul>
      <li>DTD</li>
      <li>(Element) Content Model ((要素)内容モデル)</li>
    </ul>
  </li>
</ul>

<h1>先週の終わり</h1>

<table border="1">
  <tbody>
    <tr>
      <td>文法</td>
      <td>Type</td>
      <td>言語</td>
      <td>オートマトン</td>
    </tr>
    <tr>
      <td>句構造文法</td>
      <td>0</td>
      <td>句構造言語</td>
      <td>チューリング機械</td>
    </tr>
    <tr>
      <td>文脈依存文法</td>
      <td>1</td>
      <td>文脈依存言語</td>
      <td>線形拘束オートマトン</td>
    </tr>
    <tr>
      <td>文脈自由文法</td>
      <td>2</td>
      <td>文脈自由言語</td>
      <td>プッシュダウンオートマトン</td>
    </tr>
    <tr>
      <td><strong>正規文法</strong></td>
      <td><strong>3</strong></td>
      <td><strong>正規言語</strong></td>
      <td><strong>有限オートマトン</strong></td>
    </tr>
  </tbody>
</table>

<p>正規言語は字句解析の時に使う。</p>

<h1>今週の展望</h1>
<ul>
  <li>有限オートマトン (finite state automaton, FSA)
    <ul>
      <li>決定性有限オートマトン (deterministic finite automaton,
        DFA)</li>
      <li>非決定性有限オートマトン (non-deterministic finite
        automaton, NFA)</li>
    </ul>
  </li>
  <li>正規文法 (regular grammar)
    <ul>
      <li>左線形文法 (left linear grammar)</li>
      <li>右線形文法 (right linear grammar)</li>
    </ul>
  </li>
  <li>正規表現 (regular expression)
    <ul>
      <li>単一規則の拡張 BNF</li>
    </ul>
  </li>
</ul>

<p>これらは全て同じ力を持って、正規言語を定義・受理する</p>

<h1>有限オートマトン</h1>
<ul>
  <li>スタート状態から始まる</li>
  <li>入力の語を繰り返して一字読んで、これによって状態を移す</li>
  <li>語を読み終わった時に受理状態にいるとこの語が受理される</li>
  <li>語を読み終わった時に受理状態にいない、もしくは途中で動作ができない場合に語が受理されない</li>
  <li>状態の数が有限である
    (すなわち、メモリは制限されている)</li>
</ul>

<p>(automaton はギリシア語で、複数は automata)</p>

<h1>有限オートマトンの状態遷移図</h1>

<p><img alt="有限オートマトンの状態遷移図" src="lec3img1.png"
/> 
<table border="1">
  <caption>動作関数</caption>
  <tbody>
    <tr>
      <td></td>
      <th>a</th>
      <th>b</th>
    </tr>
    <tr>
      <th>A</th>
      <td>B</td>
      <td>A</td>
    </tr>
    <tr>
      <th>B</th>
      <td>C</td>
      <td>A</td>
    </tr>
    <tr>
      <th>C</th>
      <td>C</td>
      <td>A</td>
    </tr>
  </tbody>
</table>
</p>

<h1>有限オートマトンに必要な物</h1>
<ul>
  <li>状態の有限集合 (Q、図の円)</li>
  <li>入力記号の有限集合 (Σ、図の矢印のラベル)</li>
  <li>動作関数 (δ、図のラベル付き矢印)</li>
  <li>初期状態 (q<sub>0</sub> ∈ Q、図の (二重) 矢印)</li>
  <li>受理状態の有限集合 (F ⊆ Q、図の二重円)</li>
</ul>

<table border="1">
  <caption>有限オートマトン</caption>
  <tbody>
    <tr>
      <td></td>
      <td>決定性</td>
      <td>非決定性</td>
    </tr>
    <tr>
      <td>同時に</td>
      <td>一つの状態</td>
      <td>複数の状態</td>
    </tr>
    <tr>
      <td>受理条件</td>
      <td>状態が受理状態</td>
      <td>状態の一つ以上が受理状態</td>
    </tr>
    <tr>
      <td>ε 遷移</td>
      <td>不可</td>
      <td>可能</td>
    </tr>
    <tr>
      <td>動作関数</td>
      <td>δ: Q × Σ → Q</td>
      <td>δ: Q × (Σ ∪ {ε}) → 2<sup>Q</sup></td>
    </tr>
  </tbody>
</table>

<h1>NFA から同等の DFA への変換</h1>

<p>アルゴリズムの原理:</p>
<ul>
  <li>NFA の状態の集合が DFA の状態に</li>
  <li>NFA の初期状態とそこから ε
    遷移でいける状態の集合が DFA の初期状態</li>
  <li>NFA の受理状態を一つ以上含まれる DFA
    の状態が受理状態</li>
</ul>

<p>全ての DFA は NFA でもある。全ての NFA は同等の DFA
に変換できる。</p>

<p>よって、DFA と NFA の受理能力が等しい。</p>

<p>実装は DFA
の方が簡単が、テーブルは大きくなる恐れがある。</p>

<h1>NFA から同等の DFA への変換の一例</h1>

<p><img alt=" " src="lec3img4.png" /></p>

<table border="1">
  <caption>動作関数</caption>
  <tbody>
    <tr>
      <td></td>
      <td>ε</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>S</td>
      <td>{A}</td>
      <td>{}</td>
      <td>{}</td>
    </tr>
    <tr>
      <td>A</td>
      <td>{}</td>
      <td>{A,C}</td>
      <td>{B}</td>
    </tr>
    <tr>
      <td>B</td>
      <td>{}</td>
      <td>{}</td>
      <td>{A}</td>
    </tr>
    <tr>
      <td>C</td>
      <td>{}</td>
      <td>{}</td>
      <td>{}</td>
    </tr>
  </tbody>
</table>

<h1>DFA の最小化</h1>

<p>ある DFA から同等の最小の DFA を次の通りに作れる:</p>
<ol>
  <li>状態を受理状態と非受理状態の二つの集合に分ける</li>
  <li>それそれの状態からどの記号でどの集合に遷移するかを調べる</li>
  <li>現在の集合を、どの記号でも同じ集合に遷移する状態の部分集合に分ける</li>
  <li>3. で変更がない時まで 2. から繰り返す</li>
</ol>

<p>最小化によって効率よい実装ができるし、二つの有限オートマトンが同等であるかどうかも簡単に調べられる。</p>

<h1>DFA の最小化の一例</h1>

<p><img alt=" " src="lec3img5.png" /></p>

<h1>線形文法</h1>

<table border="1">
  <caption>文法の簡単な規則</caption>
  <tbody>
    <tr>
      <td>規則の形</td>
      <td>名称</td>
    </tr>
    <tr>
      <td>A → aB</td>
      <td>左線形規則</td>
    </tr>
    <tr>
      <td>A → Ba</td>
      <td>右線形規則</td>
    </tr>
    <tr>
      <td>A → a</td>
      <td>定数規則</td>
    </tr>
  </tbody>
</table>

<p>左線形文法: 左線形規則と定数規則しか含まない文法</p>

<p>右線形文法: 右線形規則と定数規則しか含まない文法</p>

<p>左・右線形文法はともに線形文法と言い、正規文法とも言う</p>

<h1>(左) 線形文法と有限オートマトン</h1>

<p>左線形文法と NFA の対応 (ε が考慮外):</p>
<ul>
  <li>状態は非終端記号と対応</li>
  <li>初期状態は初期記号と対応</li>
  <li>受理状態に遷移する動作は定数規則と対応</li>
  <li>全ての動作は左線形規則と対応</li>
</ul>

<p>右線形文法も同様
(語を右から読み込むと考えられる)</p>

<h1>左線形文法と有限オートマトンの一例</h1>

<p><img alt="有限オートマトンの状態遷移図" src="lec3img1.png"
/></p>

<p>A → aB | bA</p>

<p>B → bA | a | aC</p>

<p>C → bA | a | aC</p>

<h1>正規表現の形式定義</h1>

<table border="1">
  <caption>アルファベットΣ 上の正規表現と表す言語</caption>
  <tbody>
    <tr>
      <th>正規表現</th>
      <th>条件</th>
      <th>言語</th>
      <th>備考</th>
    </tr>
    <tr>
      <td>ε, a</td>
      <td>a ∈ Σ</td>
      <td>{ε} 又は {a}</td>
      <td></td>
    </tr>
    <tr>
      <td>r|s</td>
      <td>r, s が正規表現</td>
      <td>L(r|s) = L(r) ∪ L(s)</td>
      <td>集合和</td>
    </tr>
    <tr>
      <td>rs</td>
      <td>r, s が正規表現</td>
      <td>L(rs) = L(r)L(s)</td>
      <td>連結</td>
    </tr>
    <tr>
      <td>r*</td>
      <td>r が正規表現</td>
      <td>L(r*) = (L(r))*</td>
      <td>閉含</td>
    </tr>
    <tr>
      <td>(r)</td>
      <td>r が正規表現</td>
      <td>L((r)) = L(r)</td>
      <td></td>
    </tr>
  </tbody>
</table>

<p>L(r) は r
によって表されている言語。優先度は下の方が強い。</p>

<p>正規表現を定義する言語は文法で書けるが、正規表現は文法と違って規則は一つしか使わない。</p>

<h1><strong></strong>実用化された正規表現</h1>

<p>正規表現の便利な追加機能</p>
<ul>
  <li>.: 字一個 (a|b|c|...)</li>
  <li>r+: 一個以上の r (rr*)</li>
  <li>r?: r の有無 (r|ε, その代わり ε は使わない)</li>
  <li>r{m,n}: m 個以上 n 個以下の r (r...rr?...r?)</li>
  <li>[b-f]: b から f の字 (b|c|d|e|f)</li>
  <li>\* 等: \ はエスケープに使われる</li>
</ul>

<p>正規表現の使い方による変更</p>
<ul>
  <li>語全体のではなくその一部をマッチ</li>
  <li>^ と $ で語の先頭と最後をマッチ</li>
  <li>括弧に相当する部分語を変数に代入</li>
</ul>

<h1>正規表現から NFA へ (1)</h1>

<p>正規表現に対応する NFA
は正規表現の部分表現から再帰的に作られる。</p>

<p>ε と a に対応する NFA
は初期状態一つと受理状態一つとそれを結ぶ ε 又は a
と書かれた矢印。</p>

<p>r|s の NFA は r の NFA と s の NFA から次のようにつくる:</p>

<p><img
alt="全体の初期状態から r と s の初期状態へと、r と s の受理状態から全体の受理状態へ ε で結ぶ"
src="lec3img2.png" /></p>

<h1>正規表現から NFA へ (2)</h1>

<p>rs の NFA は r の受理状態と s の初期状態を ε
で結んで、r の初期状態は rs の初期状態、s の受理状態は
rsの受理状態。</p>

<p>r* の NFA は次のようにつくる:</p>

<p><img
alt="全体の初期状態と r の初期状態、r の受理状態と全体の受理状態、全体の初期状態と全体の受理状態、そして r の受理状態と初期状態 (逆!) を ε で結ぶ。"
src="lec3img3.png" /></p>

<p>NFA や DFA から正規表現を作るのも可能だが、複雑。</p>

<h1>今週のまとめ</h1>
<ul>
  <li>正規表現、線形・正規文法、有限オートマトンは皆同じ表現・受理能力を持つ。</li>
  <li>DFA による効率良い受理プログラムが作れる。</li>
  <li>正規表現のコンパクトな定義方法がある。</li>
  <li>これらは字句解析に有効に使える。</li>
  <li>しかし、これらに表現できない言語がある。状態の有限な数によって、例えば一般の括弧の対応する言語は判定できない。</li>
</ul>

<h1>XML の DTD の要素内容モデル</h1>

<p>(Element) Content Model ((要素) 内容モデル) の定義: <a
href="http://www.w3.org/TR/REC-xml/#sec-element-content">http://www.w3.org/TR/REC-xml/#sec-element-content</a></p>

<p>(Element) Content Model ((要素) 内容モデル) の例:</p>

<p><code>&lt;!ELEMENT div1 (head, (p | list | note)*, div2*)&gt;</code></p>

<p>この内容モデルに相当する XML の部分の一例:</p>
<pre>&lt;div1&gt;&lt;head&gt;This is the Title&lt;/head&gt;
&lt;p&gt;Short introduction...&lt;/p&gt;
&lt;div2&gt;...&lt;/div2&gt;
&lt;div2&gt;...&lt;/div2&gt;
&lt;/div1&gt; </pre>

<p>要素内容モデルは要素を字にした正規表現。</p>

<h1>次回への宿題 (提出不要)</h1>
<ol>
  <li>次の正規表現を NFA に変換して、NFA から DFA を作る。
    <p><code>a(b|c)*a</code></p>
  </li>
  <li>1. の言語を定義する左線形文法を作る。</li>
  <li>Σ = {0, 1} の 0 が偶数の語を受理する DFA を作る。</li>
  <li>2. の言語の正規表現を作る。</li>
</ol>
</body>
</html>
