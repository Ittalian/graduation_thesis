<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <meta content="text/html; charset=UTF-8" />
  <title>第十二回: 最適化</title>
  <meta name="generator" content="amaya 9.5, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1
style="text-align: center;"><strong>言語理論とコンパイラ</strong></h1>

<p
style="text-align: center;"><strong>第十</strong><strong>二回:</strong>
最適化</p>

<p style="text-align: center;">2006 年 7月11日</p>

<p style="text-align: center"><a
href="http://www.sw.it.aoyama.ac.jp/2006/Compiler/lecture12.html">http://www.sw.it.aoyama.ac.jp/2006/Compiler/lecture12.html</a></p>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2006 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>目次</h1>
<ul>
  <li>これからの予定</li>
  <li>コード生成</li>
  <li>最適化</li>
  <li>授業改善のための学生アンケート</li>
</ul>

<h1>これからの日程</h1>

<p>補講日: 7月11日 (火曜日) 4限 E202</p>

<p>最終の授業: 7月14日 (金曜日) 2限 E202</p>

<p>期末試験: 7月28日 (金曜日) 2限 (11:10-12:35)</p>

<p><a href="index.html">全体の日程</a></p>

<p><a href="Exam2005/LTC.html">去年の試験問題</a></p>

<h1>コンパイラの段階</h1>

<p>字句解析 (lexical analysis)</p>

<p>構文解析 (parsing; syntax analysis)</p>

<p>意味解析 (semantic analysis)</p>

<p><strong>コード生成 (code generation)</strong></p>

<p><strong>最適化 (optimization)</strong></p>

<h1>機械の主な種類</h1>
<ul>
  <li>スタック・マシーン:<br />
    演算は全てスタックに行われて、バーチャルマシーンに多い</li>
  <li>RISC (Reduced instruction set computer):<br />
    演算は全てレジスタ内で行われて、純粋なロードとストアしかない</li>
  <li>CISC (Complex instruction set computer):<br />
    命令の数が多くて複雑 (例: Intel Pentium)</li>
</ul>

<h1><a name='simpleAssembler' id='simpleAssembler'>超単純アセンブリ言語</a></h1>

<p>(先週と若干修正)</p>

<table border="1">
  <caption>命令の種類</caption>
  <tbody>
    <tr>
      <td>命令</td>
      <td>被演算子</td>
      <td>説明 (コメント)</td>
    </tr>
    <tr>
      <td>LOAD</td>
      <td>R1, a</td>
      <td>メモリの変数 a の値をレジスタ R1 に代入</td>
    </tr>
    <tr>
      <td>STORE</td>
      <td>a, R1</td>
      <td>レジスタ R1 の値をメモリの変数 a に代入</td>
    </tr>
    <tr>
      <td>CONST</td>
      <td>R1, 5</td>
      <td>レジスタ R1 に 5 の定数を代入</td>
    </tr>
    <tr>
      <td>JUMP</td>
      <td>label</td>
      <td>無条件の label へジャンプ</td>
    </tr>
    <tr>
      <td>JUMP&lt;</td>
      <td>R1, label</td>
      <td>レジスタ R1 が 0 より小さい時 label へジャンプ
        (同様に JUMP&lt;=, JUMP==, JUMP!=, JUMP&gt;= とJUMP&gt;
        がある。)</td>
    </tr>
    <tr>
      <td>ADD</td>
      <td>R1, R2, R3</td>
      <td>R2 と R3 を足して R1
        に代入。同じレジスタを何回使ってもよい。同様に
        SUB、MUL、DIV がある。</td>
    </tr>
  </tbody>
</table>
<ul>
  <li>メモリのアドレスは変数名 (小文字) で表す</li>
  <li>レジスタは R1, R2,... で表し、数は無制限</li>
  <li>被演算子の順番は結果が一番最初に
    (第一回の授業の宿題や去年の期末試験問題と違う)</li>
</ul>

<h1>簡単な式のコード生成</h1>

<p>式: b = a * 3 + c</p>

<p>生成されるコード:</p>
<pre>        LOAD    R1, a
        CONST   R2, 3
        MUL     R3, R1, R2
        LOAD    R4, c
        ADD     R5, R3, R4
        STORE   b, R5</pre>

<h1>if 文などのコード生成</h1>
<ul>
  <li>条件を条件付きジャンプ命令に変更</li>
  <li>条件付き命令は前の演算から残るフラグを使ったり、0
    との比較が多い</li>
  <li>条件が合わない場合にジャンプすることが多い</li>
  <li>ジャンプの行き先がまだ分からない場合が多い</li>
</ul>

<h1><code>if</code> 文のコード生成の例</h1>

<p>文: if (a&gt;10) { b = 15; }</p>

<p>生成されるコード:</p>
<pre>        LOAD    R1, a
        CONST   R2, 10
        SUB     R3, R1, R2   ; R3 = a-10
        JUMP&lt;=  R3, else1    ; jump to else part if a-10&lt;=0
        CONST   R4, 15
        STORE   b, R4
else1:</pre>

<h1><code>if</code> 文のコード生成の応用</h1>
<ul>
  <li>論理積は複数の入れ子の <code>if</code>
    文と似た様になる</li>
  <li>論理和も複数の <code>JUMP</code> で実装されるが</li>
</ul>

<h1>関数呼び出しのコード生成</h1>
<ul>
  <li>呼び出し側と関数側に特別なコードが必要</li>
  <li>機械・OS・言語特有の関数呼び出しスタックの構成を考慮する必要があ</li>
  <li>関数呼び出しスタックの内容 (関数フレーム):
    <ul>
      <li>戻り番地 (関数後どこに戻るか)</li>
      <li>引数、戻り値</li>
      <li>前の関数フレームのベースポインタ</li>
      <li>使われるレジスターの値を退避する一時変数</li>
      <li>ローカル変数</li>
    </ul>
  </li>
</ul>

<h1>最適化の目的</h1>
<ul>
  <li>プログラムの実行速度の向上</li>
  <li>コードの量の削減</li>
  <li>次のことを保つ:
    <ul>
      <li>プログラムの意味</li>
      <li>コンパイルの速度</li>
      <li>デバグのしやすさ</li>
    </ul>
  </li>
</ul>

<h1>最適化の手法</h1>
<ul>
  <li>制御フロー解析 (control flow analysis)
    <ul>
      <li>プログラムを順番に実行される部分
        (「飛び込み」も「飛び出し」もないもの;
        基本ブロックという) に切り分ける</li>
      <li>基本ブロックをノードに制御フローのグラフを作る</li>
    </ul>
  </li>
  <li>データフロー解析 (data flow analysis)
    <ul>
      <li>制御フロー解析の結果、どこの変数の代入がどこの変数の使用に影響を及ぼせるかを分析<br
        />
      </li>
    </ul>
  </li>
</ul>

<h1>最適化の手段 (1)</h1>

<p>複数の手法を繰り返し組み合わせて少しづつ最適化</p>
<ul>
  <li>静式評価 (constant folding, 定数たたみこみ)</li>
  <li>定数伝播 (constant propagation)</li>
  <li>共通の式の繰り返しからの追い出し</li>
  <li>無用命令の削除 (dead code elimination)</li>
  <li>命令をループの外へ移動</li>
  <li>演算の変更 (例: <code>x*2</code> → <code>x+x</code>
    もしくは <code>x&lt;&lt;1</code>)</li>
</ul>

<h1>最適化の手段 (2)</h1>

<p>この最適化はコードの量を増やすが、速くする</p>
<ul>
  <li>関数呼び出しの展開</li>
  <li>繰り返しの展開
    <ul>
      <li>少定数の繰り返しの展開
        (コードが小さくなる可能性もある)</li>
      <li>一部展開
        (20回の繰り返しを4部展開して5回繰り返す)</li>
    </ul>
  </li>
</ul>

<h1>最適化の手段 (3)</h1>

<p>この手段は機械に強く依存する</p>
<ul>
  <li>命令の入れ替え
    (命令によってかかる時間が違う、大きさが違う)</li>
  <li>命令の順番の変更 (LOAD の後すぐ使わないなど)</li>
</ul>

<h1>命令の順番の変更の応用例</h1>

<p>式: 5 * a</p>

<p>最適化前:</p>
<pre>	CONST   R1, 5
	LOAD    R2, a        ; LOAD は時間がかかる
	MUL     R3, R1, R2</pre>

<p>最適化後:</p>
<pre> 	LOAD    R1, a
	CONST   R2, 10       ; LOAD の間、CONST も実行可能
	MUL     R3, R1, R2</pre>

<h1>最適化の実例</h1>

<p><a href="optimize/code.c">ソース</a></p>

<p><a href="optimize/code.O0.s">最適化なし</a></p>

<p><a href="optimize/code.O3.s">最適化済み</a></p>

<p>(アセンブリ言語は Intel PC 用 (CISC))</p>

<h1>授業改善のための学生アンケート</h1>
<ul>
</ul>
</body>
</html>
