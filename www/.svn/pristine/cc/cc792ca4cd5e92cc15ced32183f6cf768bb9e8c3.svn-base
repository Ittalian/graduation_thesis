<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>プログラミング基礎 I:
  正規表現によるテキスト検索と変更</title>
  <meta name="generator" content="amaya 9.0, see http://www.w3.org/Amaya/" />
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet"
  type="text/css" media="screen" />
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet"
  type="text/css" media="projection" />
  <link href="../../stylesheets/slide-print.css" rel="stylesheet"
  type="text/css" media="print" />
  <style type="text/css">
  </style>
</head>

<body>
<h1 style="text-align: center">プログラミング基礎 I</h1>

<h2 style="text-align: center">第八回 (2005年 6月 6日):
正規表現によるテキスト検索と変更</h2>

<p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU"
src="../../stylesheets/aoyamalogo.jpg" /></a></p>

<p class="signature">© 2005 <a href="mailto:duerst@it.aoyama.ac.jp">Martin
J. Dürst</a> <a href="http://www.aoyama.ac.jp/">青山学院大学</a></p>

<h1>第一問 : 次の Perl に使う言葉を簡単に説明せよ</h1>

<p>1.1 スカラ変数: データを一個 (数か文字列)
納められる「箱」みたいな物</p>

<p>1.2 演算子: 計算の種類 (例えば足し算、割り算)
を表す記号</p>

<p>1.3 代入: 変数にデータを入れる演算・操作のこと</p>

<p>1.4 配列:
データを複数納められる変数で、一個一個は番号でアクセスできる</p>

<p>1.5 文字列: 文字が順番に並んでいるデータのこと。例:
"Hello, World!"</p>

<h1>第二問: <code>$i</code> と <code>$j</code> の数、<code>$s</code>
と <code>$t</code> の文字列を比べる演算子を書け</h1>

<table border="1">
  <tbody>
    <tr>
      <td>例</td>
      <td><code>$i</code> が <code>$j</code> より小さい</td>
      <td><code>$i  &lt;  $j</code></td>
    </tr>
    <tr>
      <td>2.1</td>
      <td><code>$i</code> が <code>$j</code> と同じ</td>
      <td><code>$i</code>==<code>  $j</code></td>
    </tr>
    <tr>
      <td>2.2</td>
      <td><code>$i</code> が <code>$j</code> 以上</td>
      <td><code>$i</code>&gt;=<code>  $j</code></td>
    </tr>
    <tr>
      <td>2.3</td>
      <td><code>$i</code> が <code>$j</code> と等しくない</td>
      <td><code>$i</code>!=<code>  $j</code></td>
    </tr>
    <tr>
      <td>2.4</td>
      <td><code>$s</code> が <code>$t</code> と同じ</td>
      <td><code>$s</code>eq<code>  $t</code></td>
    </tr>
    <tr>
      <td>2.5</td>
      <td><code>$s</code> が <code>$t</code> より大きい</td>
      <td><code>$s</code>gt<code>  $t</code></td>
    </tr>
  </tbody>
</table>

<h1>第三問:
次の式の中の演算子の意味を一つの単語か文で書け</h1>

<table border="1">
  <tbody>
    <tr>
      <td>例</td>
      <td><code>$i + $j</code></td>
      <td>足し算                                                          </td>
    </tr>
    <tr>
      <td>3.1</td>
      <td><code>$i * $j</code></td>
      <td>掛け算</td>
    </tr>
    <tr>
      <td>3.2</td>
      <td><code>$i / $j</code></td>
      <td>割り算</td>
    </tr>
    <tr>
      <td>3.3</td>
      <td><code>$i += $j</code></td>
      <td>$j を $i に足す (代入演算)</td>
    </tr>
    <tr>
      <td>3.4</td>
      <td><code>$i % $j</code></td>
      <td>割り算の余り</td>
    </tr>
    <tr>
      <td>3.5</td>
      <td><code>$s .= " hello"</code></td>
      <td>$s の末尾に " hello" をくっつける (代入演算)</td>
    </tr>
  </tbody>
</table>

<h1>第四問: 次のプログラムの出力を書け</h1>

<p>4.1 のプログラム:</p>
<pre>$i = 0;
while ($i &lt; 3) {
    print ("hello");
    $i++;
}</pre>

<p>出力: <code>hellohellohello</code></p>

<p>4.2 のプログラム:</p>
<pre>$i = 5;  $k = 7;
if ($i &gt; $k) {
    print "$i is greater";
} else {
    print "$k is greater";
}</pre>

<p>出力: <code>7 is greater</code></p>

<h1>第五問:
次のプログラムの次の呼び出しの場合の出力を書け</h1>

<p>プログラム <code>check.pl</code>:</p>
<pre>$low = shift();
$high = shift();
$check = shift();
if ($check &lt; $low) {
    print "too low";
} elsif ($check &gt;= $high) {
    print "too high";
} else {
    print "okay";
}</pre>

<p>5.1 の呼び出し: <code>check.pl 4 5 8</code>   出力: <code>too
high</code></p>

<p>5.2 の呼び出し: <code>check.pl 4 8 8</code>   出力: <code>too
high</code></p>

<p>5.3 の呼び出し: <code>check.pl 4 8 5</code>   出力:
<code>okay</code></p>

<p>5.4 の呼び出し: <code>check.pl 3 7 3</code>   出力:
<code>okay</code></p>

<p>5.5 の呼び出し: <code>check.pl 9 5 7</code>   出力: <code>too
low</code></p>

<h1>先々週の宿題</h1>
<ul>
  <li>入力した数が 素数かどうかを判断する<br />
    (ヒント: 数 <em>n</em> の場合、2 から <em>n</em>-1
    までで割って、いずれも余りがでたら <em>n</em>
  が素数)</li>
  <li>1 から 1000 の間の素数を見つける (ヒント: 二重
    <code>while</code>)</li>
  <li>日本の現在の低利子で何年かかると元本が倍になるか計算する</li>
  <li>ローンの払い戻し:
    借りた額、利子、そして毎月や毎年の払い戻し額からローンは何年で払い戻せるかを計算する</li>
  <li>ローンの逆計算: ある条件 (払い戻し期間と額、年利)
    でいくら借りられるか等</li>
</ul>

<h1>先週の演習・宿題</h1>
<ul>
  <li>スペースを区切りに使う入力ファイルをコンマを使うファイルに変換するプログラムを作る<br
    />

    <pre>while (&lt;&gt;) {
    print join ",", split " ";
}</pre>
  </li>
  <li>以前作った BMI
    やガス請求のプログラムを、大量処理に対応するように変換:
    <ul>
      <li>入力はファイルから</li>
      <li>ファイルは行ごとデータがある (例えば BMI
        の場合は身長、体重など)</li>
    </ul>
  </li>
  <li>もっと色々な区切りの変換を行うプログラムを作る</li>
  <li>自分の周りに文書・データの変換
    (文字の置き換えなど) の問題を見つける</li>
</ul>

<h1>先週のまとめ: 標準入出力</h1>

<p>プログラム内の処理:</p>
<pre>while (&lt;&gt;) {
    # 行ごとの処理
}</pre>

<p>(<code>&lt;&gt;</code> の代わりに <code>&lt;STDIN&gt;</code>
も書ける)</p>

<p>プログラムの使い方:</p>

<p><code>C:\perl&gt;prog.pl &lt;inputfile.txt &gt;outputfile.txt</code></p>

<h1>条件としての正規表現</h1>

<p>入力の行の文字列を調べる</p>

<p>例: "the" が含まれている行だけを出力:</p>
<pre>while (&lt;&gt;) {
    if (/the/) {
        print;
    }
}</pre>

<h1>正規表現の「演算子」</h1>
<ul>
  <li><code>+</code>: 直前の物が一回以上<br />
    例: <code>/a+/</code> は a, aa, aaa, aaaa,... と合う</li>
  <li><code>?</code>: 直前の物の有無<br />
    例: <code>/a?/</code> は a と「空文字列」と合う</li>
  <li><code>*</code>: 直前の物が 0 回以上<br />
    例: <code>/a*/</code> は「空文字列」、a, aa, aaa, aaaa,...
    と合う</li>
  <li><code>|</code>: 両側の選択肢<br />
    例: <code>/abc|def/</code> は abc もしくは def と合う</li>
  <li><code>()</code>: 組み合わせ、つかみ取り<br />
    例: <code>/(abc)+/</code> は abc, abcabc, abcabcabc,... と合う</li>
</ul>

<h1>正規表現の例</h1>
<ul>
  <li>efg: efg</li>
  <li>e*fg: fg, efg, eefg, eeefg,...</li>
  <li>ef*g: eg, efg, effg, efffg, effffg,...</li>
  <li>e(fg)*: e, efg, efgfg, efgfgfg,...</li>
  <li>e|f|g: e, f, g</li>
  <li>ef|g: ef, g</li>
  <li>e(f|g): ef, eg</li>
  <li>e(f|g)*: e, ef, eg, eff, efg, egf, egg, efff, effg,...</li>
  <li>e|(fg)*: e, fg, fgfg, fgfgfg,...</li>
  <li>e|(f|g)*: e, f, g, ff, fg, gf, gg</li>
</ul>

<h1>文字の集合</h1>

<p>正規表現で文字の集合を表すことが多い。</p>

<p><code>(0|1|2|3|4|5|6|7|8|9)</code> は長すぎて不便。</p>

<p>文字の集合: <code>[0123456789]</code></p>

<p>(文字コードで) 連続する数字は <code>-</code>
で省略できる: <code>[0-9]</code></p>

<p><code>^</code> で反対の集合を表せる: <code>[^0-9]</code>:
数字を含まない文字集合</p>

<p>どの文字でも良いのは <code>.</code> で表す</p>

<h1>文字列の先頭と末尾</h1>

<p>正規表現の最初に <code>^</code>
が来ると先頭から合わないといけない<br />
例: <code>/^The/</code>: "The" から始まる文字列</p>

<p>正規表現の最後に <code>$</code>
が来ると末尾から合わないといけない<br />
例: <code>/\.$/</code>: 行の最後に "." (<code>\</code>
はエスケープの記号)</p>

<p>正規表現の最初に <code>^</code> と最後に <code>$</code>
が来ると全部が合わないといけない<br />例: <code>/^abc$/</code>: abc</p>

<h1>正規表現の使い方</h1>
<ul>
  <li>条件: <code>/</code>...<code>/</code> もしくは
    <code>置き換え:</code>...<code>/</code> (<code>m</code> は
  "match")</li>
  <li>置き換え: <code>s/</code>...<code>/</code>...<code>/</code>
    (<code>s</code> は "substitute") の前の部分</li>
  <li><code>split</code> の第一引数 (但し、<code>join</code>
    は違う)</li>
  <li>変数に対しての処理:
    <ul>
      <li><code>$string =~ m/</code>...<code>/;</code></li>
      <li><code>$string !~ m/</code>...<code>/;</code>
        (合わないことの条件)</li>
      <li><code>$string =~ s/</code>...<code>/</code>...<code>/;</code></li>
    </ul>
  </li>
</ul>

<h1>謎の変数 <code>$_</code></h1>

<p>Perl
では、多くの操作、命令は何を対処にしているのか書かなくても良い</p>

<p>その場合には変数<code>$_</code> が対処となる</p>

<p>例:</p>
<ul>
  <li><code>print;</code> は <code>$_</code> を出力</li>
  <li><var></var><code>m/.../</code> は <code>$_</code>
    と合うかどうかチェックする</li>
  <li><code>&lt;&gt;</code> は <code>$_</code> に読み込む</li>
</ul>

<h1>簡単な演習・宿題</h1>
<ul>
  <li>ローマ字表記を「ワープロ式」や訓令式からヘボン式へ変換するプログラムを作る</li>
  <li>他に正規表現を使うプログラムを作る</li>
</ul>

<h1>ヘボン式ローマ字表記</h1>

<p>ヘボン式の主な特徴</p>
<ul>
  <li>し: shi</li>
  <li>しゃ、しょ、しゅ: sha, sho, shu</li>
  <li>ふ: fu</li>
  <li>じ、じゃ、じょ、じゅ: ji, ja, jo, ju</li>
  <li>つ、づ: tsu, zu</li>
  <li>ち、ちゃ、ちょ、ちゅ: chi, cha, cho, chu</li>
  <li>ぢ、ぢゃ、ぢょ、ぢゅ: ji, ja, jo, ju</li>
</ul>
</body>
</html>
