<rdf:RDF
    xmlns:dcterms="http://purl.org/dc/terms/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:dc="http://purl.org/dc/elements/1.1/" >
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1">
    <dc:description>Inheritance</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-1">
    <dc:description>What is Inheritance?</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-2">
    <dc:description>Inheritance is one of the main object-oriented principals</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-3">
    <dc:description>It promotes reuse</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-4">
    <dc:description>It is a mechanism for sharing commonalities between classes</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-5">
    <dc:description>Commonalities are stored in a parent class also called superclass</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-6">
    <dc:description>Commonalities are shared between children classes also called subclasses</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-7">
    <dc:description>Specialization and Generalization</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-8">
    <dc:description>Defining Inheritance</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-9">
    <dc:description>In Java, inheritance is supported by using keyword extends</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-10">
    <dc:description>It is said that subclass extends superclass</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-11">
    <dc:description>If class definition does not specify explicit superclass, its superclass is Object class</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-12">
    <dc:description>Variables and Inheritance</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-13">
    <dc:description>Variables can be declared as generic types, and assigned objects of more specific types</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-14">
    <dc:description>Variable declared as of type Policy can be assigned an instance of any Policy’s subclasse</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-15">
    <dc:description>What is Inherited?</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-16">
    <dc:description>In general all subclasses inherit Data and Behavior from superclass</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-17">
    <dc:description>When we map these to Java it means that subclasses inherit Fields (instance variables) and Methods</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-18">
    <dc:description>Inheriting Fields</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-19">
    <dc:description>All fields from superclasses are inherited by a subclass</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-20">
    <dc:description>Inheritance goes all the way up the hierarchy</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-21">
    <dc:description>Inheriting Methods</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-22">
    <dc:description>All methods from superclasses are inherited by a subclass</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-1-23">
    <dc:description>Inheritance goes all the way up the hierarchy</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-2">
    <dc:description>Method Lookup</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-2-1">
    <dc:description>Method lookup begins in the class of that object that receives a message</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-2-2">
    <dc:description>If method is not found lookup continues in the superclass</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3">
    <dc:description>this vs. super</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3-1">
    <dc:description>They are both names of the receiver object</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3-2">
    <dc:description>The difference is where the method lookup begins</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3-3">
    <dc:description>this</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3-4">
    <dc:description>Lookup begins in the receiver object’s class</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3-5">
    <dc:description>super</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3-6">
    <dc:description>Lookup begins in the superclass of the class where the method is defined</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-3-7">
    <dc:description>Example</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4">
    <dc:description>Overriding</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-1">
    <dc:description>Method Overriding</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-2">
    <dc:description>If a class define same method as its superclass, it is said that the method is overridden</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-3">
    <dc:description>Method signatures must match</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-4">
    <dc:description>Overriding Constructors</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-5">
    <dc:description>Similar to overriding methods, applying rules specific to constructors</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-6">
    <dc:description>First line in the constructor must be either this(parameters) or super(parameters)</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-7">
    <dc:description>This eventually leads to the Object class constructor that creates the object</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-8">
    <dc:description>If the call is not coded explicitly then an implicit zero-argument super() is called</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-9">
    <dc:description>If the superclass does not have a zero-argument constructor, this causes an error</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture4.html#lec4-4-10">
    <dc:description>Example of Overriding Constructors</dc:description>
  </rdf:Description>
</rdf:RDF>
