<rdf:RDF
    xmlns:dcterms="http://purl.org/dc/terms/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:dc="http://purl.org/dc/elements/1.1/" >
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-1">
    <dc:description>What is Object-Oriented Technology?</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-1-1">
    <dc:description>It is a technology that allows modeling of software as the real world</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-1-2">
    <dc:description>This is achieved through objects and interactions between them</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-1-3">
    <dc:description>It is a way of thinking of software as reusable components</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-1-4">
    <dc:description>Every object is a component on its own and could be reused in different context</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-2">
    <dc:description>Why Use Object-Oriented Systems?</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-2-1">
    <dc:description>Benefits of Object-Oriented systems:</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-2-2">
    <dc:description>Greater flexibility</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-2-3">
    <dc:description>Reusability of objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-2-4">
    <dc:description>Higher quality control</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-2-5">
    <dc:description>Lower maintenance</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-3">
    <dc:description>Developing Object-Oriented Software</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-3-1">
    <dc:description>Software is modeled by objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-3-2">
    <dc:description>Software objects represent real-world objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-3-3">
    <dc:description>Each object contains:</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-3-4">
    <dc:description>State, i.e., data</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-3-5">
    <dc:description>Behavior, i.e., methods/functions</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-4">
    <dc:description>Object-Oriented Software</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-4-1">
    <dc:description>Developing object-oriented software is identifying:</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-4-2">
    <dc:description>Objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-4-3">
    <dc:description>Characteristics of individual objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-4-4">
    <dc:description>Relationships between objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-4-5">
    <dc:description>Objects interact by sending messages to each other</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-4-6">
    <dc:description>Interacting objects make an object-oriented system</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-5">
    <dc:description>Objects and Loose Coupling</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-5-1">
    <dc:description>Changing an object’s data does not lead to changes in an object’s external behavior</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-5-2">
    <dc:description>An object’s external interface stays the same</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-5-3">
    <dc:description>Promotes loose coupling between objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-6">
    <dc:description>Objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-6-1">
    <dc:description>Every object has State and Behavior</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-6-2">
    <dc:description>State represents data - what an object knows, or what an object contains</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-6-3">
    <dc:description>Behavior represents what an object can do</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-7">
    <dc:description>Object State and Behavior</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-7-1">
    <dc:description>Person object</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-7-2">
    <dc:description>State: age, name, children</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-7-3">
    <dc:description>Behavior: addChild, getAge, setAge</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-8">
    <dc:description>Interactions between Objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-8-1">
    <dc:description>Object interact by sending messages to each other</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-8-2">
    <dc:description>Objects and interactions between them make up an object-oriented system</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-9">
    <dc:description>Message</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-9-1">
    <dc:description>There are two major terms in messaging</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-9-2">
    <dc:description>Message sender</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-9-3">
    <dc:description>Message receiver</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-9-4">
    <dc:description>Messages may have arguments</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-10">
    <dc:description>Method</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-10-1">
    <dc:description>Method is concrete implementation of a message</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-10-2">
    <dc:description>Method represents an object’s response to a message</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-11">
    <dc:description>Object’s Public Protocol</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-11-1">
    <dc:description>Public protocol is set of messages that can be sent to an object</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-11-2">
    <dc:description>It does not include messages that an object can send to itself.  These are private</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-12">
    <dc:description>Field</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-12-1">
    <dc:description>Fields represent characteristics of an object</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-12-2">
    <dc:description>Fields are also known as attributes, or instance variables</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-13">
    <dc:description>Object-Oriented Principal: Encapsulation</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-13-1">
    <dc:description>Objects hide implementation of the messages behind their public protocols</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-13-2">
    <dc:description>Object’s internal implementation is accessed by that object only</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-13-3">
    <dc:description>Encapsulation is also known as implementation hiding</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-14">
    <dc:description>Classes</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-14-1">
    <dc:description>Factories for creating objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-14-2">
    <dc:description>Template for the same kind of objects that describes their state and behavior</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-14-3">
    <dc:description>Code repository for objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-14-4">
    <dc:description>Classes define objects (by defining their state and behavior) and their type</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-15">
    <dc:description>Instance</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-15-1">
    <dc:description>Every object is an instance of some class</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-15-2">
    <dc:description>All instances of same class have the same protocol and same fields and same methods that are defined by the class</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16">
    <dc:description>Object-Oriented Principal: Inheritance</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-1">
    <dc:description>Some classes may share commonalities</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-2">
    <dc:description>For example HomePolicy, AutoPolicy, LifePolicy classes may all have same state and behavior</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-3">
    <dc:description>Instead of repeating commonalities in each class, we can abstract them in a common place</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-4">
    <dc:description>These commonalities can be stored in a super class</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-5">
    <dc:description>Each subclass inherits state and behavior from its superclass</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-6">
    <dc:description>Why Inheritance?</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-7">
    <dc:description>Inheritance represents real-world modeling</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-8">
    <dc:description>Some objects are special cases of other objects</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-9">
    <dc:description>Inheritance promotes reuse and extensibility</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-10">
    <dc:description>Same data and behavior is shared among objects of different types (different class)</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-16-11">
    <dc:description>New data and new behavior that is common for those objects is easier to add</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17">
    <dc:description>Object-Oriented Principal: Polymorphism</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-1">
    <dc:description>Polymorphism</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-2">
    <dc:description>different objects respond to the same message in different ways</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-3">
    <dc:description>For example when asked to talk a dog barks, and a cat meows</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-4">
    <dc:description>Overriding</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-5">
    <dc:description>Overriding means that subclass may implement the same method as superclass, but with different code</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-6">
    <dc:description>toString() method in the Object class is an example of often overridden method</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-7">
    <dc:description>Overriding Example</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-17-8">
    <dc:description>Considering Animal class, Dog and Cat as subclassesAll, Animal objects should know how to talk</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-18">
    <dc:description>Dynamic Binding</dc:description>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.sw.it.aoyama.ac.jp/2006/ITPRO1/lecture2.html#lec2-18-1">
    <dc:description>Dynamic binding represents runtime method binding</dc:description>
  </rdf:Description>
</rdf:RDF>
